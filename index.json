[{"content":"Ever frustrated of asking users to view the record from the right app by asking them to navigate to it using the app launcher?\nIn this post, let’s see the possible solutions to get rid of this manual task of navigating to the right app before viewing the record (or any other page).\nExecute the below SOQL query to fetch the DurableId of the lightning application.\nSELECTDurableIdFROMAppDefinitionWHEREDeveloperName=\u0026#39;\u0026lt;DeveloperName_of_the_app\u0026gt;\u0026#39;    @media screen and (min-width: 900px) { img[alt=\"Get DurableId\"] { width: 70%; /* margin: 0 auto; */ } }  Now copy this DurableId and use it in the place of {durable-id} the below URL format.\nhttps://{lightning-base-url}/lightning/app/{durable-id}    Note: Lightning Base URLs end with lightning.force.com  In my case, the URL would be something like this:\nhttps://modified-domain.lightning.force.com/lightning/app/06m5h000004Ym2FAAS Now that we have this URL, if I want to view all the account object page inside the “Dreamhouse” application, I can simply append the relative URL path /o/Account/list to the above URL.\nhttps://modified-domain.lightning.force.com/lightning/app/06m5h000004Ym2FAAS/o/Account/list    The same logic applies to record pages or any other pages too (Custom Tabs, VF pages etc.)\nBelow are a couple of URL formats for opening record pages and custom tabs in a specific application:\nhttps://{lightning-base-url}/lightning/app/{durable-id}/r/{object-api-name}/{record-id}/view https://{lightning-base-url}/lightning/app/{durable-id}/n/{custom-tab-api-name} It is important to note that the DurableId varies in each sandbox for the same app.\nTo avoid using DurableId in the URL, we can use the app’s DeveloperName in combination with the Salesforce classic base URL, like so:\nhttps://{org-domain-name}.my.salesforce.com/lightning/app/c__{app-developername}    Note: Classic base URLs end with my.salesforce.com  In my case, to open the Dreamhouse app, the URL would be something like this:\nhttps://modified-domain.my.salesforce.com/lightning/app/c__Dreamhouse You might have noticed we have appended c__ prefix to the developer name of the application. That’s because Dreamhouse is a custom application. For standard applications, use the prefix standard__ before the app’s developer name.\nFor example, standard__Sales .\nWe can apply the same logic (appending relative URL path) here as well, to open object pages or record pages in a specific application.\nTo open account object page inside the Dreamhouse app:\nhttps://modified-domain.my.salesforce.com/lightning/app/c__Dreamhouse/o/account/list    That’s it! I hope this post is helpful. See ya!\nReferences   AppDefinition | Object Reference for the Salesforce Platform IdeaExchange | Deep Link (Direct Link) to a Salesforce Lightning App StackExchange | How to switch into a specific app in Lightning Experience from a link?  ","date":"Mar 09, 2024","permalink":"/posts/salesforce/switch-into-specific-lightning-applications-from-url/","section":"Posts","summary":"In this post, let’s see how to switch into specific apps in Lightning Experience from URL","title":"Switch into specific lightning applications from URL"},{"content":"In this post, we\u0026rsquo;ll use Lightning Web Components and User Interface APIs in Salesforce to build a custom related list view that can display complete data of fields in multiple lines without clipping out the text. First, let\u0026rsquo;s take a look at it\u0026rsquo;s cool features, then we\u0026rsquo;ll proceed with the implementation.\nFeatures  1. Reusable LWC with design attributes This custom component leverages Salesforce User Interface APIs to create a generic related list view component, customizable for any supported object through design attributes.\n      Refer to this doc to view all the List View Supported Objects.  2. View complete data with “Wrap Text” If data exceeds more than one line for a particular field/cell, the custom datatable truncates it in a single line by default. But when clicked on \u0026ldquo;Wrap Text\u0026rdquo;, it expands the row with a scroll bar on the particular cell, to view the complete content.   3. View Rich Text Area fields in rich-text formatting The component also renders data in rich-text format for fields that have the datatype as Rich Text Area.   Implementation  To build this custom related list view, we would need to create two LWCs:\n One - that extends the lightning datatable to support rich-text formatted content. Two - the container component that embeds the above custom component and implements the datatable functionalities (sorting, refresh, etc.).  Building the custom datatable component  Create a new LWC with the name - customDatatable\ncustomDatatable.html\n\u0026lt;template\u0026gt; \u0026lt;/template\u0026gt; customDatatable.js\nimport LightningDatatable from \u0026#34;lightning/datatable\u0026#34;; import richTextColumnType from \u0026#34;./richTextColumnType.html\u0026#34;; import { api } from \u0026#34;lwc\u0026#34;; export default class CustomDatatable extends LightningDatatable { static customTypes = { // custom type definition  richText: { template: richTextColumnType, standardCellLayout: true } } @api customScrollToTop() { this.template.querySelector(\u0026#39;.slds-scrollable_y\u0026#39;).scrollTop = 0; } } customDatatable.js-meta.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;LightningComponentBundle xmlns=\u0026#34;http://soap.sforce.com/2006/04/metadata\u0026#34;\u0026gt; \u0026lt;apiVersion\u0026gt;56.0\u0026lt;/apiVersion\u0026gt; \u0026lt;isExposed\u0026gt;true\u0026lt;/isExposed\u0026gt; \u0026lt;targets\u0026gt; \u0026lt;target\u0026gt;lightning__RecordPage\u0026lt;/target\u0026gt; \u0026lt;target\u0026gt;lightning__HomePage\u0026lt;/target\u0026gt; \u0026lt;/targets\u0026gt; \u0026lt;/LightningComponentBundle\u0026gt; Using the custom datatable to build a custom related list view  Create another LWC with the name - customRelatedList\ncustomRelatedList.html\n\u0026lt;template\u0026gt; \u0026lt;div class=\u0026#34;related-list-style-div\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;slds-card_boundary\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header related-list-header\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__col-title\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-media\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-media__figure\u0026#34;\u0026gt; \u0026lt;lightning-icon icon-name={iconName} alternative-text={relatedListTitle} size=\u0026#34;small\u0026#34; title=\u0026#34;large size\u0026#34; \u0026gt;\u0026lt;/lightning-icon\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;slds-media__body\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__name\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__name-title\u0026#34;\u0026gt; \u0026lt;h1\u0026gt; \u0026lt;span class=\u0026#34;slds-page-header__title slds-truncate related-list-title\u0026#34; title={relatedListTitleWithCount}\u0026gt; {relatedListTitleWithCount} \u0026lt;/span\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__col-actions\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__controls\u0026#34;\u0026gt; \u0026lt;div if:true={showClipWrapButton} class=\u0026#34;slds-page-header__control\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;slds-button slds-button_icon slds-button_icon-more\u0026#34; aria-haspopup=\u0026#34;true\u0026#34; aria-expanded=\u0026#34;false\u0026#34; title=\u0026#34;Clip/Wrap Text\u0026#34; onclick={handleClipWrap} \u0026gt; \u0026lt;lightning-icon if:true={wrapText} icon-name=\u0026#34;utility:right_align\u0026#34; alternative-text=\u0026#34;Wrap Text\u0026#34; size=\u0026#34;xx-small\u0026#34; \u0026gt;\u0026lt;/lightning-icon\u0026gt; \u0026lt;lightning-icon if:false={wrapText} icon-name=\u0026#34;utility:center_align_text\u0026#34; alternative-text=\u0026#34;Clip Text\u0026#34; size=\u0026#34;xx-small\u0026#34; \u0026gt;\u0026lt;/lightning-icon\u0026gt; \u0026lt;span class=\u0026#34;slds-assistive-text\u0026#34;\u0026gt;Clip/Wrap Text\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__control\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;slds-button slds-button_icon slds-button_icon-border-filled\u0026#34; title=\u0026#34;Refresh List\u0026#34; onclick={handleRefreshList} \u0026gt; \u0026lt;lightning-icon icon-name=\u0026#34;utility:refresh\u0026#34; alternative-text=\u0026#34;Refresh List\u0026#34; size=\u0026#34;xx-small\u0026#34;\u0026gt;\u0026lt;/lightning-icon\u0026gt; \u0026lt;span class=\u0026#34;slds-assistive-text\u0026#34;\u0026gt;Refresh List\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;template if:true={showNewButton}\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__control\u0026#34;\u0026gt; \u0026lt;ul class=\u0026#34;slds-button-group-list\u0026#34;\u0026gt; \u0026lt;li\u0026gt; \u0026lt;lightning-button variant=\u0026#34;neutral\u0026#34; label=\u0026#34;New\u0026#34; onclick={navigateToNewRecordPage}\u0026gt;\u0026lt;/lightning-button\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;template if:true={showListMeta}\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;slds-page-header__col-meta\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;slds-page-header__meta-text related-list-meta\u0026#34;\u0026gt;{recordCountMeta} items • Sorted by {sortedByFieldLabel}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;related-list-body\u0026#34;\u0026gt; \u0026lt;template if:true={showLoading}\u0026gt; \u0026lt;lightning-spinner alternative-text=\u0026#34;Loading\u0026#34;\u0026gt;\u0026lt;/lightning-spinner\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;c-custom-datatable key-field=\u0026#34;id\u0026#34; columns={dataTableColumns} data={notes} hide-checkbox-column=\u0026#34;true\u0026#34; sorted-direction={sortDirection} sorted-by={sortedBy} onsort={handleSort} enable-infinite-loading onloadmore={handleLoadMore} load-more-offset=\u0026#34;10\u0026#34; show-row-number-column=\u0026#34;true\u0026#34; \u0026gt; \u0026lt;/c-custom-datatable\u0026gt; \u0026lt;template if:true={showEmptyMessage}\u0026gt; \u0026lt;div style=\u0026#34;height: 10vh; background: #f3f3f3\u0026#34; class=\u0026#34;slds-align_absolute-center\u0026#34;\u0026gt; \u0026lt;p\u0026gt; \u0026lt;template if:false={unsupportedListview}\u0026gt;No items to display\u0026lt;/template\u0026gt; \u0026lt;template if:true={unsupportedListview}\u0026gt;Unsupported listview. Please review the component\u0026#39;s design attributes.\u0026lt;/template\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; customRelatedList.css\n.related-list-header { border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-bottom: 1px solid rgb(201, 201, 201); } .related-list-title { font-size: 1rem; position: relative; top: 2px; } .related-list-meta { font-size: 0.8rem; } .related-list-body { position: relative; min-height: 10vh; max-width: 100%; overflow-x: auto; } .setings-down-arrow { --lwc-squareIconXxSmallContent: 0.6rem; } customRelatedList.js\n/* eslint-disable @lwc/lwc/no-async-operation */ /* eslint-disable @lwc/lwc/no-inner-html */ import { LightningElement, wire, api } from \u0026#34;lwc\u0026#34;; import { getRecord, getFieldValue } from \u0026#34;lightning/uiRecordApi\u0026#34;; import { getRelatedListInfo, getRelatedListRecords } from \u0026#34;lightning/uiRelatedListApi\u0026#34;; import { NavigationMixin } from \u0026#34;lightning/navigation\u0026#34;; import { encodeDefaultFieldValues } from \u0026#34;lightning/pageReferenceUtils\u0026#34;; import { refreshGraphQL } from \u0026#34;lightning/uiGraphQLApi\u0026#34;; export default class CustomNotesRelatedList extends NavigationMixin(LightningElement) { @api recordId; @api objectApiName; notes; wiredNotesResult; relatedListColumns; // API response columns  dataTable; dataTableColumns; // Datatable columns  dataTableColumnsMap; relatedListFields; lookupField; pageToken; currentPageToken; nextPageToken; @api iconName; @api pRelatedListTitle; relatedListTitle; @api pNotesRelatedList; notesRelatedList; @api pNoteObjectApiName; noteObjectApiName; @api pNotesFields; notesFields; @api pDefaultSortedBy; sortedBy; @api pDefaultSortDirection; sortDirection; @api pFilterText = \u0026#39;{ CreatedBy: { Name: { ne: \u0026#34;System Batch Job\u0026#34; } } }\u0026#39;; filterText; @api pPageSize; pageSize; @api showNewButton; showLoading1 = true; showLoading2 = false; wrapText = false; styleAdded = false; forceRefresh = false; showClipWrapButton = false; unsupportedListview = false; maxCellheight = 150; // in (px)  maxTableHeight = 60; // in (vh)  cellScrollbarWidth = 9; // in (px)  connectedCallback() { this.relatedListTitle = this.pRelatedListTitle; this.notesRelatedList = this.pNotesRelatedList; this.parentObjectApiName = this.pParentObjectApiName; this.noteObjectApiName = this.pNoteObjectApiName; this.notesFields = this.pNotesFields.split(\u0026#34;,\u0026#34;).map((x) =\u0026gt; this.pNoteObjectApiName + \u0026#39;.\u0026#39; + x.trim()); this.sortedBy = this.pDefaultSortedBy; this.sortDirection = this.pDefaultSortDirection; this.filterText = this.pFilterText; this.pageSize = this.pPageSize; } renderedCallback() { if (!this.styleAdded) this.loadStyle(); } loadStyle() { let e = this.template.querySelector(\u0026#34;.related-list-style-div\u0026#34;); if (e) { let x = \u0026#34;\u0026lt;style\u0026gt;\u0026#34;; // Scrollable cell styles  x += \u0026#34;.related-list-body tbody td span { max-height: \u0026#34; + this.maxCellheight + \u0026#34;px !important; overflow-y: auto !important; white-space: normal !important; word-wrap: break-word !important;}\u0026#34;; // Scrollable table styles  x += \u0026#34;.related-list-body div.slds-scrollable_y { max-height: \u0026#34;+ this.maxTableHeight +\u0026#34;vh !important; }\u0026#34;; // Scroll bar styles (only for cell scroll)  x += \u0026#34;.related-list-body tbody td span::-webkit-scrollbar { width: \u0026#34; + this.cellScrollbarWidth + \u0026#34;px; height: \u0026#34; + this.cellScrollbarWidth + \u0026#34;px; }.related-list-body tbody td span::-webkit-scrollbar-track {border: 1px solid rgb(196, 196, 196);border-radius: 10px;}.related-list-body tbody td span::-webkit-scrollbar-thumb {background: #949494;border-radius: 10px;}\u0026#34;; // For accurate calculation of row numbers  x += \u0026#34;.related-list-body table \u0026gt; tbody \u0026gt; tr.slds-hint-parent { counter-increment: row-number1; } .related-list-body .slds-table .slds-row-number:after { content: counter(row-number1); }\u0026#34;; // To disable row hover  x += \u0026#34;.related-list-body tr:hover \u0026gt; * { background-color: #fff !important; }\u0026#34;; x += \u0026#34;\u0026lt;/style\u0026gt;\u0026#34;; e.innerHTML = x; this.styleAdded = true; } // this.template.querySelector(\u0026#34;.related-list-body tbody\u0026#34;).classList.add(\u0026#34;c-custom-counter\u0026#34;);  } @wire(getRecord, { recordId: \u0026#34;$recordId\u0026#34;, fields: [\u0026#34;Case.RecordTypeId\u0026#34;] }) caseRecord; get recordTypeId() { return getFieldValue(this.caseRecord.data, \u0026#34;Case.RecordTypeId\u0026#34;); } get showLoading() { return this.showLoading1 || this.showLoading2; } @wire(getRelatedListInfo, { parentObjectApiName: \u0026#34;$objectApiName\u0026#34;, relatedListId: \u0026#34;$notesRelatedList\u0026#34;, optionalFields: \u0026#34;$notesFields\u0026#34;, restrictColumnsToLayout: false }) wiredListInfo({ error, data }) { if (data) { this.relatedListColumns = data.displayColumns; this.lookupField = data.fieldApiName; console.log(JSON.stringify(data, null, 2)); // to sort the columns based on the order of fields in the pNotesFields (when restrictColumnsToLayout is false, the order of fields in the relatedListColumns is not guaranteed to be the same as the order of fields in the pNotesFields. Hence the sorting is necessary)  let columnMap = {}; this.relatedListColumns.forEach((col) =\u0026gt; { columnMap[col.fieldApiName] = col; }); let columns = []; let listOfFields = this.pNotesFields.split(\u0026#34;,\u0026#34;).map((field) =\u0026gt; field.trim()); listOfFields.forEach((field) =\u0026gt; { if (columnMap[field]) columns.push(columnMap[field]); }); // preparing the columns for the datatable  this.dataTableColumns = columns.map((col) =\u0026gt; this.prepareDatatableColumn(col)); this.dataTableColumnsMap = {}; this.dataTableColumns.forEach((col) =\u0026gt; { this.dataTableColumnsMap[col.fieldName] = col; }); this.fieldApiNames = this.relatedListColumns.map((col) =\u0026gt; col.fieldApiName); this.relatedListFields = this.fieldApiNames.map((col) =\u0026gt; this.noteObjectApiName + \u0026#34;.\u0026#34; + col); } else if (error) { console.error(JSON.stringify(error, null, 2)); this.showLoading1 = false; this.unsupportedListview = true; } } prepareDatatableColumn(col) { let x = { label: col.label, fieldName: col.fieldApiName, sortable: col.sortable, type: col.dataType }; if (col.dataType === \u0026#34;textarea\u0026#34;) { x.type = \u0026#34;richText\u0026#34;; x.wrapText = false; } else if (col.dataType === \u0026#34;boolean\u0026#34;) { x.initialWidth = 80; } else if (this.isUrlCol(col)) { x.type = \u0026#34;url\u0026#34;; x.typeAttributes = { label: { fieldName: x.fieldName } }; x.fieldName = col.lookupId + \u0026#34;_URL\u0026#34;; } return x; } isUrlCol(col) { return col.dataType === \u0026#34;string\u0026#34; \u0026amp;\u0026amp; col.lookupId !== null; } isNameCol(col) { return col.dataType === \u0026#34;string\u0026#34; \u0026amp;\u0026amp; col.lookupId === \u0026#34;Id\u0026#34;; } isPicklistCol(col) { return col.dataType === \u0026#34;picklist\u0026#34;; } handleSort(event) { this.showLoading1 = true; this.moveScrollbarToTop(); this.forceRefresh = true; this.sortedBy = event.detail.fieldName; this.sortDirection = event.detail.sortDirection; this.pageToken = null; } get sortBy() { let x = this.noteObjectApiName + \u0026#34;.\u0026#34;; let z = this.dataTableColumnsMap ? this.dataTableColumnsMap[this.sortedBy] : null; x = z \u0026amp;\u0026amp; z.type === \u0026#34;url\u0026#34; ? x + z.typeAttributes.label.fieldName : x + this.sortedBy; let y = this.sortDirection === \u0026#34;asc\u0026#34; ? x : \u0026#34;-\u0026#34; + x; return [y]; } get sortedByFieldLabel() { let z = this.dataTableColumnsMap ? this.dataTableColumnsMap[this.sortedBy] : null; return z ? z.label : \u0026#34;\u0026#34;; } prepareNote(record) { let note = {}; function getLookupObjectName(column) { return column.fieldApiName.split(\u0026#34;.\u0026#34;)[0]; } try { this.relatedListColumns.forEach( function (col) { let field = col.fieldApiName; if (this.isUrlCol(col)) { note[field] = field in record.fields ? record.fields[field].value : record.fields[getLookupObjectName(col)].displayValue; note[col.lookupId + \u0026#34;_URL\u0026#34;] = \u0026#34;/\u0026#34; + record.fields[getLookupObjectName(col)].value.id; } else { let v = record.fields[field].displayValue ? record.fields[field].displayValue : record.fields[field].value; note[field] = v; } }.bind(this) ); } catch (error) { console.error(error); } note.Id = record.id; note.Id_URL = \u0026#34;/\u0026#34; + record.id; return note; } @wire(getRelatedListRecords, { parentRecordId: \u0026#34;$recordId\u0026#34;, relatedListId: \u0026#34;$notesRelatedList\u0026#34;, fields: \u0026#34;$relatedListFields\u0026#34;, sortBy: \u0026#34;$sortBy\u0026#34;, pageSize: \u0026#34;$pageSize\u0026#34;, // max pageSize = 249; default = 50  pageToken: \u0026#34;$pageToken\u0026#34;, where: \u0026#34;$filterText\u0026#34; }) wiredNotes(result) { if (!this.relatedListFields) { return; } this.wiredNotesResult = result; const { error, data } = result; if (data) { let x = []; data.records.forEach((record) =\u0026gt; { x.push(this.prepareNote(record)); }); if (this.currentPageToken \u0026amp;\u0026amp; this.currentPageToken === data.previousPageToken) { let z = JSON.parse(JSON.stringify(this.notes)); Array.prototype.push.apply(z, x); this.notes = z; } else { this.notes = x; } this.currentPageToken = data.currentPageToken; this.nextPageToken = data.nextPageToken; if (this.forceRefresh) this.refreshData(); if (this.dataTable) this.dataTable.isLoading = false; this.showLoading1 = false; } else if (error) { console.error(JSON.stringify(error)); this.notes = []; this.showLoading1 = false; } } get recordCount() { return this.notes ? this.notes.length : 0; } get hasNotes() { return this.recordCount !== 0; } get showEmptyMessage() { return !this.showLoading \u0026amp;\u0026amp; !this.hasNotes; } get showListMeta() { return this.recordCount \u0026gt; 1; } get recordCountMeta() { return this.nextPageToken ? this.recordCount + \u0026#34;+\u0026#34; : this.recordCount; } get relatedListTitleWithCount() { return this.relatedListTitle + \u0026#34; (\u0026#34; + this.recordCountMeta + \u0026#34;)\u0026#34;; } handleClipWrap() { if (this.dataTableColumns) { let x = JSON.parse(JSON.stringify(this.dataTableColumns)); this.wrapText = !this.wrapText; x.forEach((col) =\u0026gt; { col.wrapText = this.wrapText; }); this.dataTableColumns = x; } } handleRefreshList() { this.moveScrollbarToTop(); this.showLoading2 = true; if (this.pageToken) { this.pageToken = null; this.currentPageToken = null; this.forceRefresh = true; } else { this.refreshData(this.wiredNotesResult); } } moveScrollbarToTop() { try { this.template.querySelector(\u0026#34;c-custom-datatable\u0026#34;).customScrollToTop(); } catch (error) { console.error(error); } } async refreshData() { this.showLoading2 = true; this.forceRefresh = false; await refreshGraphQL(this.wiredNotesResult); this.showLoading2 = false; } handleLoadMore(event) { event.preventDefault(); if (this.nextPageToken) { this.dataTable = event.target; event.target.isLoading = true; this.loadMoreData(); // event.target.isLoading = false;  } else { event.target.enableInfiniteLoading = false; } } loadMoreData() { // comment the below line when infinite loading is enabled  // this.showLoading1 = true;  this.pageToken = this.nextPageToken; } navigateToNewRecordPage() { let x = {}; x[this.lookupField] = this.recordId; const defaultValues = encodeDefaultFieldValues(x); try { this[NavigationMixin.Navigate]({ type: \u0026#34;standard__objectPage\u0026#34;, attributes: { objectApiName: this.noteObjectApiName, actionName: \u0026#34;new\u0026#34; }, state: { nooverride: \u0026#34;1\u0026#34;, navigationLocation: \u0026#34;RELATED_LIST\u0026#34;, defaultFieldValues: defaultValues } }); } catch (error) { console.error(error); } } } customRelatedList.js-meta.xml\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;LightningComponentBundle xmlns=\u0026#34;http://soap.sforce.com/2006/04/metadata\u0026#34;\u0026gt; \u0026lt;apiVersion\u0026gt;56.0\u0026lt;/apiVersion\u0026gt; \u0026lt;isExposed\u0026gt;true\u0026lt;/isExposed\u0026gt; \u0026lt;masterLabel\u0026gt;Custom Related List\u0026lt;/masterLabel\u0026gt; \u0026lt;description\u0026gt;The component displays a datatable that supports Rich text formatting and scrollable columns for values with multiple lines.\u0026lt;/description\u0026gt; \u0026lt;targets\u0026gt; \u0026lt;target\u0026gt;lightning__RecordPage\u0026lt;/target\u0026gt; \u0026lt;/targets\u0026gt; \u0026lt;targetConfigs\u0026gt; \u0026lt;targetConfig targets=\u0026#34;lightning__RecordPage\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;iconName\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Related list icon name\u0026#34; default=\u0026#34;standard:case\u0026#34; description=\u0026#34;Refer to SLDS icons.\u0026#34; required=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;pNoteObjectApiName\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Child Object API name\u0026#34; default=\u0026#34;Case\u0026#34; description=\u0026#34;Enter the API name of the child object.\u0026#34; required=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;pRelatedListTitle\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Related List Title\u0026#34; default=\u0026#34;Related Cases\u0026#34; description=\u0026#34;The title of the related list to be displayed.\u0026#34; required=\u0026#34;true\u0026#34;/\u0026gt; \u0026lt;property name=\u0026#34;pNotesRelatedList\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Related List ID\u0026#34; default=\u0026#34;Cases\u0026#34; required=\u0026#34;true\u0026#34; description=\u0026#34;Child Relationship Name (Append \u0026#39;__r\u0026#39; if needed).\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;pNotesFields\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;List Columns\u0026#34; default=\u0026#34;CaseNumber, CreatedDate, CreatedBy.Alias, IsClosed\u0026#34; description=\u0026#34;Provide API names of the fields in the child object (comma separated).\u0026#34; placeholder=\u0026#34;Field1, Field2__c, Lookup.Name, etc.\u0026#34; required=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;showNewButton\u0026#34; type=\u0026#34;Boolean\u0026#34; label=\u0026#34;Allow users to create records\u0026#34; description=\u0026#34;Enable to show the New button on the related list\u0026#34; default=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;pDefaultSortedBy\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Sorted By (Default)\u0026#34; default=\u0026#34;CreatedDate\u0026#34; description=\u0026#34;Provide the API name of the field in the child object, to sort the list by default.\u0026#34; required=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;pDefaultSortDirection\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Default sort direction\u0026#34; default=\u0026#34;desc\u0026#34; datasource=\u0026#34;asc,desc\u0026#34; required=\u0026#34;true\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;pFilterText\u0026#34; type=\u0026#34;String\u0026#34; label=\u0026#34;Filter Criteria (GraphQL syntax)\u0026#34; description=\u0026#34;The filter to apply to the related list records, in GraphQL syntax.\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;pPageSize\u0026#34; type=\u0026#34;Integer\u0026#34; label=\u0026#34;Page Size\u0026#34; description=\u0026#34;Number of records to load in each request.\u0026#34; default=\u0026#34;50\u0026#34; required=\u0026#34;true\u0026#34; max=\u0026#34;200\u0026#34; /\u0026gt; \u0026lt;/targetConfig\u0026gt; \u0026lt;/targetConfigs\u0026gt; \u0026lt;/LightningComponentBundle\u0026gt; customRelatedList.svg\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u0026lt;!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools --\u0026gt; \u0026lt;svg width=\u0026#34;800px\u0026#34; height=\u0026#34;800px\u0026#34; viewBox=\u0026#34;0 0 24 24\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;#000000\u0026#34; stroke-width=\u0026#34;1\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;miter\u0026#34;\u0026gt;\u0026lt;rect x=\u0026#34;3\u0026#34; y=\u0026#34;3\u0026#34; width=\u0026#34;18\u0026#34; height=\u0026#34;18\u0026#34; rx=\u0026#34;0\u0026#34; fill=\u0026#34;#059cf7\u0026#34; opacity=\u0026#34;0.1\u0026#34;\u0026gt;\u0026lt;/rect\u0026gt;\u0026lt;rect x=\u0026#34;3\u0026#34; y=\u0026#34;3\u0026#34; width=\u0026#34;18\u0026#34; height=\u0026#34;18\u0026#34; rx=\u0026#34;0\u0026#34;\u0026gt;\u0026lt;/rect\u0026gt;\u0026lt;line x1=\u0026#34;21\u0026#34; y1=\u0026#34;9\u0026#34; x2=\u0026#34;3\u0026#34; y2=\u0026#34;9\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;line x1=\u0026#34;21\u0026#34; y1=\u0026#34;15\u0026#34; x2=\u0026#34;3\u0026#34; y2=\u0026#34;15\u0026#34;\u0026gt;\u0026lt;/line\u0026gt;\u0026lt;/svg\u0026gt; Add the custom related list component to the record page  Inside the lightning app builder page, search for the “Custom Related List\u0026quot; component\n   Drag the component into the canvas and modify the values of the design attributes as applicable.\n   Save the record page. That’s it, we now have a reusable custom related list view component that can display complete data of the long text fields and also, in rich-text format.\nUseful Resources   lightning/uiRelatedListApi | Lightning Web Components Developer Guide lightning-datatable - Salesforce Lightning Component Library LWC rich text column type for lightning-datatable  I hope this post is helpful! See ya!\n","date":"Feb 17, 2024","permalink":"/posts/salesforce/custom-related-list-view/","section":"Posts","summary":"In this post, we\u0026rsquo;ll use Lightning Web Components and User Interface APIs in Salesforce to build a custom related list view\u0026hellip;","title":"Custom Related List View using uiRelatedListApi methods"},{"content":"Productivity shame is a feeling of inadequacy or guilt that arises when we believe we are not being productive enough. It\u0026rsquo;s essentially an internal pressure to constantly achieve and accomplish, often fueled by unrealistic expectations. In this post, we\u0026rsquo;ll learn more about it.\nUnderlying Causes  Here are some causes that can trigger feelings of not being more productive:\n1. Setting unrealistic expectations: We may set standards for ourselves that are impossible to attain, such as working around the clock or wanting to achieve perfection in everything that we do.\n2. Lack of boundaries: Blurring the lines between work and personal life can lead to constant feeling of needing to be productive, even during downtime. (Believe me, this is bad! 😕)\n3. Social comparison: Comparing ourselves to others, especially on social media where everyone showcases their most productive moments, can trigger feelings of inadequacy.\nHow to know if you\u0026rsquo;re experiencing productivity shame?  Understanding the causes is important, but do you know if you\u0026rsquo;re experiencing producitivity shame?\n Do you struggle to take breaks or disconnect from work, even when you\u0026rsquo;re not actively working? Do you find yourself working late into the night or sacrificing sleep to get things done? Have you noticed changes in your eating or sleep habits due to stress and anxiety about productivity? Do you find yourself constantly criticizing your accomplishments and focusing on what you haven\u0026rsquo;t done? Do you avoid social activities or hobbies because you feel guilty about not being productive enough?  By reflecting on these questions, you can gain a better understanding of whether productivity shame might be at play. Unfortunately, my answer to all the above questions was \u0026ldquo;Yes\u0026rdquo;. I was never satisfied; and the guilt degraded my confidence in every meeitng at work.\nBreaking free from the feeling  Here are some ways to overcome the feeling of productivity shame:\n Define realistic goals: Set achievable goals that align with your needs and capabilities, not just societal expectations. Embrace imperfection: Accept that everyone has limitations and it\u0026rsquo;s okay not to be productive all the time. Focus on progress, not perfection: Celebrate small wins and incremental progress rather than fixating on reaching the \u0026ldquo;perfect\u0026rdquo; level of productivity. Set boundaries: Create clear boundaries between work and personal life and prioritize self-care to avoid burnout. Disconnect from social comparison: Limit your exposure to curated online spaces and focus on your own journey. Practice self-compassion: Be kind to yourself and acknowledge your efforts, even when things don\u0026rsquo;t go as planned.  Did I overcome it?  Well, as of this day, no, I haven\u0026rsquo;t! You might wonder, \u0026ldquo;then what\u0026rsquo;s the point?\u0026rdquo;. To me, discovering that such a thing exists was an eye-opener. Feeling overwhelmed and ashamed can lead to burnout and decreased motivation to work, creating a vicious cycle. Sadly, I have been trapped in this cycle for a very long time.\nNow that I understand it, I\u0026rsquo;ll know it the next time when I feel guilty about being less productive, and try to address the real problem. And trust me it is not a goal, it\u0026rsquo;s a process. I hope this post is helpful to you!\nKeep grinding! 💪  ","date":"Jul 20, 2023","permalink":"/posts/productivity/what-is-productivity-shame/","section":"Posts","summary":"In this post, we\u0026rsquo;ll learn about productivity shame and ways to overcome it.","title":"What is Productivity Shame?"},{"content":"There are situations in which a listview might seem to have too much of information. So I have built a custom list view component which is the customized version of the standard list view aura component.\n   As shown in the image, the minimal list view removes most of the elements from the standard list view. It has a custom title, and an option to reset the width of the columns if altered by the user.\nNow let\u0026rsquo;s jump to the coding part. If you already know how to create aura components in VS code, you can proceed with creating one and skip to this section.\nCreating an Aura Component     Ensure whether you have installed Salesforce recommended extensions in VS Code and you are connected to an org.   Press Ctrl + Shift + P and type aura Choose SFDX: Create Aura Component Provide your desired filename (minimalListViewAura in this post) and press Enter Provide the desired directory or just press Enter again Now the Aura component has been successfully created and ready to be built and customized.  Building the Minimal list view component  Copy the code into the corresponding files.\nminimalListViewAura.cmp\n\u0026lt;aura:component implements=\u0026#34;flexipage:availableForAllPageTypes\u0026#34; access=\u0026#34;global\u0026#34;\u0026gt; \u0026lt;aura:attribute name=\u0026#34;object\u0026#34; type=\u0026#34;String\u0026#34; default=\u0026#34;Account\u0026#34; /\u0026gt; \u0026lt;aura:attribute name=\u0026#34;listName\u0026#34; type=\u0026#34;String\u0026#34; default=\u0026#34;Recent\u0026#34; /\u0026gt; \u0026lt;aura:attribute name=\u0026#34;listTitle\u0026#34; type=\u0026#34;String\u0026#34; default=\u0026#34;Recent Accounts\u0026#34; /\u0026gt; \u0026lt;aura:attribute name=\u0026#34;rows\u0026#34; type=\u0026#34;Integer\u0026#34; default=\u0026#34;5\u0026#34;/\u0026gt; \u0026lt;div style=\u0026#34;position: relative;\u0026#34;\u0026gt; \u0026lt;h2 id=\u0026#34;custom-list-title\u0026#34;\u0026gt;{!v.listTitle}\u0026lt;/h2\u0026gt; \u0026lt;lightning:listView objectApiName=\u0026#34;{!v.object}\u0026#34; listName=\u0026#34;{!v.listName}\u0026#34; rows=\u0026#34;{!v.rows}\u0026#34; showSearchBar=\u0026#34;false\u0026#34; showActionBar=\u0026#34;false\u0026#34; enableInlineEdit=\u0026#34;false\u0026#34; showRowLevelActions=\u0026#34;false\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aura:component\u0026gt;  minimalListViewAura.css\n.THIS .infinite-loading, .THIS force-list-view-manager-status-info, .THIS force-list-view-manager-button-bar, .THIS .forceListViewSettingsMenu .slds-dropdown__header, .THIS .firstHeaderRow { display: none; } .THIS .errorColumnHeader, .THIS .errorColumn { display: none; } .THIS .forceListViewSettingsMenu { position: absolute; top: 5px; right: 10px; } .THIS .forceListViewSettingsMenu button { height: 27px; width: 35px; } .THIS #custom-list-title { position: absolute; top: 7px; left: 10px; z-index: 10; font-size: large; font-weight: bold; } That\u0026rsquo;s it! The minimal list view component is ready to be deployed to org.\n Right click on the component folder and choose SFDX: Deploy Source to Org After successful deployment, open the Org in Salesforce and on the desired app page, click on Edit Page option in the Gear icon at the right top of the page. As soon as the Lightning App Builder view has loaded, search for the component(minimalListViewAura) which we just deployed Drag and drop the component to the app page. The component fetches recently viewed accounts from Account object and displays the top 5 rows by default.     Using Minimal list view inside another aura component  The component which we now created can be injected into other aura components and reused for listviews in other objects. For example, if you want to view My Opportunities as a minimal list view inside another aura component, insert the following code at the desired section inside your component.\n\u0026lt;c:minimalListViewAura object=\u0026#34;Opportunity\u0026#34; listName=\u0026#34;MyOpportunities\u0026#34; listTitle=\u0026#34;My Opportunities\u0026#34; rows=\u0026#34;7\u0026#34; /\u0026gt;       Visit the Salesforce Lightning Component Library to know more about Aura components and Lightning Web Components.  ","date":"Apr 03, 2022","permalink":"/posts/salesforce/minimal-list-view/","section":"Posts","summary":"","title":"Minimal List View using Aura Components in Salesforce"},{"content":"Yes, you read the title right! If you’re here, then I assume that you already have an understanding of the basic tree traversal methods (pre-order, post-order and in-order traversals). Using these methods, we can print all the nodes of a binary tree in a single line, or in multiple lines. In this post, we will see how we can use the binarytree package to visualize a binary tree.\n   Create a virtual environment (Optional)  This is an optional step. Virtual environments in Python keep project dependencies isolated, preventing conflicts between projects needing different libraries. This ensures your code runs the same way on any machine and makes collaboration easier by letting others easily set up the same environment.\nTo create a virtual environment, follow these steps:\n Create an empty folder that’ll serve as your project folder. Open the folder in Terminal (Mac/Linux) or Command Prompt (Windows) Now execute the below command:  python -m venv venv This creates a folder that will store the virtual environment inside the project folder.\nNow that the virtual environment is created, it has to be activated to run the Python interpreter from the virtual environment.\nTo activate the virtual environment, execute the below command:\nIf you’re on a Mac/Linux system:\nsource venv/bin/activate If you’re on a Windows system:\nvenv\\Scripts\\activate.bat Once the virtual environment is activated, you’ll see (venv) appended in the prompt line (see below image).\n      To learn more about virtual environments, check this documentation.  Install the binarytree package  To display the binary tree in the terminal, we will utilize the binarytree package. To install the package, just execute the below command:\npip install binarytree The package contains a class called Node. An instance of this class when printed, displays all its child nodes in the binary tree. Hence, when we print the root node, it displays the entire binary tree.\nCreate a module  You can avoid this step by including the code directly into the main python file. But creating a module helps with code reusability and avoid redundant lines of code. The module that we create, will have the function to display the binary tree. The function can be called from any python file inside the same project folder.\nTo create the module:\n Create a new file named “binarytree_helper.py” Now, paste the below lines of code into the file.  from binarytree import Node class BT_Node: def __init__(self, data): self.data = data self.left = None self.right = None def drawTree(v: BT_Node): if v == None: return None r = Node(v.data) r.left = drawTree(v.left) r.right = drawTree(v.right) return r def printTree(v: BT_Node): print(drawTree(v)) Displaying the binary tree  Create another python file (say “sample.py”) in the same folder, and paste the below lines of code into the file.\nfrom binarytree_helper import BT_Node, printTree if __name__ == \u0026#34;__main__\u0026#34;: root = BT_Node(1) root.left = BT_Node(2) root.right = BT_Node(3) root.left.left = BT_Node(4) root.left.right = BT_Node(5) root.right.left = BT_Node(6) root.right.right = BT_Node(7) root.left.left.left = BT_Node(8) root.left.left.right = BT_Node(9) root.left.right.left = BT_Node(10) root.left.right.right = BT_Node(11) root.right.left.left = BT_Node(12) root.right.left.right = BT_Node(13) root.right.right.left = BT_Node(14) root.right.right.right = BT_Node(15) printTree(root) This python code constructs a binary tree using the BT_Node class and displays the tree structure using the printTree function imported from the binarytree_helper module.\nLet’s see it in action. Run the python file by executing the below command:\npython sample.py Now, the tree is displayed in the terminal is a visually pleasing way with levels and branches.\n   That’s it! We have done it!\n   Let’s print some more trees.\nHere’s a balanced tree:\nfrom binarytree_helper import BT_Node, printTree if __name__ == \u0026#34;__main__\u0026#34;: root = BT_Node(10) root.left = BT_Node(20) root.right = BT_Node(30) root.left.left = BT_Node(40) root.left.right = BT_Node(50) printTree(root)    And the below one is a skewed tree:\nfrom binarytree_helper import BT_Node, printTree if __name__ == \u0026#34;__main__\u0026#34;: root = BT_Node(5) root.left = BT_Node(10) root.left.left = BT_Node(30) root.left.left.left = BT_Node(40) root.left.left.left.left = BT_Node(20) printTree(root)    I can go on printing the different variations of the binary tree, but I think it’s good if I stop here. I hope you got the point. Now, this printTree function can be used in any python file that you create in this project folder.\nAlright! That’s how you visualise a binary tree in Python. I hope this post is helpful.\nSee you in an another one. Until then - stay safe, and keep coding!\n","date":"Jan 11, 2022","permalink":"/posts/dsa/visualize-a-binary-tree-in-python/","section":"Posts","summary":"In this post, we will see how we can use the \u003ccode\u003ebinarytree\u003c/code\u003e package to visualize a binary tree","title":"Visualize a Binary Tree in Python"},{"content":" Open Terminal using Ctrl + Alt + T or from the app launcher Navigate to the directory /usr/share/X11/xkb/symbols  cd /usr/share/X11/xkb/symbols  Edit the file named pc as an administrator or root user  sudo gedit pc  Identify the two keys which you want to swap.     Note: You can only swap two keys here. You cannot assign same functionality to both the keys.  In my case, I have to swap the Right Control key and Right Shift key.\nNow you can either log out and login or restart the shell by pressing Alt+F2 and running the restart command.\nThats it! You have remapped your keyboard keys successfully 🎉\n","date":"Sep 20, 2021","permalink":"/posts/ubuntu/remap-keys/","section":"Posts","summary":"In this post, I\u0026rsquo;ll share the steps to swap the functionalities of two keys on a keyboard in Ubuntu","title":"Remap Keys in Ubuntu [20.04]"},{"content":"Create a react app\nnpm init react-app {react-app-name} Create an empty repository in GitHub with the same name of the react app.\ngit remote add origin https://github.com/{github-username}/{repo-name}    Note: Replace {github-username} with your GitHub username and {repo-name} with your repository name.  Install gh-pages package and save it as a dev dependency.\nnpm install gh-pages --save-dev In package.json, add this line\nhomepage: \u0026#34;https://{github-username}.github.io/{repository-name}\u0026#34;, Under scripts, add these two lines\n\u0026#34;predeploy\u0026#34;: \u0026#34;npm run build\u0026#34;, \u0026#34;deploy\u0026#34;: \u0026#34;gh-pages -d build\u0026#34;, Push all your code to the remote GitHub repository.\nNow, run this command\nnpm run deploy On the browser, go to → https://{github-username}.github.io/{repository-name}\nYay!!! Our react app is published using GitHub Pages! 🎉\n","date":"Aug 03, 2021","permalink":"/posts/react-js/deploy-gh-pages/","section":"Posts","summary":"In this post, I\u0026rsquo;ll share the steps to be followed to deploy a react app to github pages.","title":"Deploying React App to GitHub Pages"}]